# .github/workflows/release-builder.yml

name: Build and Release Executables

# 触发条件：当一个以 'v' 开头的 tag 被推送到仓库时 (例如 v1.0, v1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'

# 定义环境变量，方便修改
env:
  # 你的应用程序名称，会用作生成的可执行文件的名字
  APP_NAME: my-python-app
  # 你希望用来构建的 Python 版本
  PYTHON_VERSION: "3.9"

jobs:
  build-release:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    # 使用策略矩阵 (strategy matrix) 来为多个平台并行构建
    strategy:
      matrix:
        include:
          # 1. Linux AMD64 (x86_64) - 指定为 ubuntu-22.04 保证兼容性
          - os: ubuntu-22.04
            arch: x86_64
            asset_name_prefix: linux-amd64
            archive_suffix: tar.gz

          # 2. Linux ARM64 (aarch64) - 需要 QEMU 来模拟
          - os: ubuntu-22.04
            arch: aarch64
            asset_name_prefix: linux-arm64
            archive_suffix: tar.gz

          # 3. Windows AMD64 (x86_64)
          - os: windows-latest
            arch: x86_64
            asset_name_prefix: windows-amd64
            archive_suffix: zip

          # 4. macOS AMD64 (Intel) - 指定为 macos-12 保证兼容性
          - os: macos-12
            arch: x86_64
            asset_name_prefix: macos-amd64
            target_arch_for_pyinstaller: x86_64
            archive_suffix: tar.gz

          # 5. macOS ARM64 (Apple Silicon) - 指定为 macos-12 保证兼容性
          - os: macos-12
            arch: arm64
            asset_name_prefix: macos-arm64
            target_arch_for_pyinstaller: arm64
            archive_suffix: tar.gz

    # 指定构建环境的虚拟机
    runs-on: ${{ matrix.os }}

    steps:
      # 第一步：检出你的代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：(仅限ARM64) 设置 QEMU 模拟器
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-22.04' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3

      # 第三步：设置 Python 环境
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}

      # 第四步：安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第五步：使用 PyInstaller 构建
      - name: Build with PyInstaller
        run: |
          PYINSTALLER_ARGS="--onefile --name ${{ env.APP_NAME }}"
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --target-arch ${{ matrix.target_arch_for_pyinstaller }}"
          fi
          pyinstaller $PYINSTALLER_ARGS main.py

      # 第六步：准备用于打包的文件
      # 将可执行文件移动到一个单独的目录中，方便打包
      - name: Prepare package
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv dist/${{ env.APP_NAME }}.exe release/
          else
            mv dist/${{ env.APP_NAME }} release/
          fi

      # 第七步：打包成压缩文件
      - name: Package the executable
        shell: bash
        run: |
          cd release
          ASSET_NAME="../${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }}.${{ matrix.archive_suffix }}"
          if [ "${{ matrix.archive_suffix }}" == "zip" ]; then
            7z a $ASSET_NAME ./*
          else
            tar -czvf $ASSET_NAME ./*
          fi
          cd ..

      # 第八步：上传构建产物到 Release
      - name: Upload assets to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }}.${{ matrix.archive_suffix }}
          tag: ${{ github.ref_name }}
          overwrite: true
