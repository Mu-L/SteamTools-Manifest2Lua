# .github/workflows/release-builder.yml

name: Build and Release Executables

# 触发条件：当一个以 'v' 开头的 tag 被推送到仓库时 (例如 v1.0, v1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'

# 定义环境变量，方便修改
env:
  # 你的应用程序名称，会用作生成的可执行文件的名字
  APP_NAME: my-python-app
  # 你希望用来构建的 Python 版本
  PYTHON_VERSION: "3.9"

jobs:
  build-release:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    # 使用策略矩阵 (strategy matrix) 来为多个平台并行构建
    strategy:
      matrix:
        include:
          # 1. Linux AMD64 (x86_64)
          - os: ubuntu-latest
            arch: x86_64
            asset_name_prefix: linux-amd64
            target_arch_for_pyinstaller: x86_64

          # 2. Linux ARM64 (aarch64) - 需要 QEMU 来模拟
          - os: ubuntu-latest
            arch: aarch64
            asset_name_prefix: linux-arm64
            target_arch_for_pyinstaller: aarch64

          # 3. Windows AMD64 (x86_64)
          - os: windows-latest
            arch: x86_64
            asset_name_prefix: windows-amd64
            asset_suffix: .exe
            archive_format: zip

          # 4. macOS AMD64 (Intel)
          - os: macos-latest
            arch: x86_64
            asset_name_prefix: macos-amd64
            target_arch_for_pyinstaller: x86_64

          # 5. macOS ARM64 (Apple Silicon)
          - os: macos-latest
            arch: arm64
            asset_name_prefix: macos-arm64
            target_arch_for_pyinstaller: arm64

    # 指定构建环境的虚拟机
    runs-on: ${{ matrix.os }}

    steps:
      # 第一步：检出你的代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 第二步：(仅限ARM64) 设置 QEMU 模拟器
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2

      # 第三步：设置 Python 环境
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}

      # 第四步：安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第五步：使用 PyInstaller 构建
      - name: Build with PyInstaller
        # 注意 macOS 的 --target-arch 参数
        run: |
          pyinstaller --onefile \
                      --name ${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }} \
                      ${{ matrix.os == 'macos-latest' && format('--target-arch {0}', matrix.target_arch_for_pyinstaller) || '' }} \
                      main.py

      # 第六步：打包成压缩文件 (zip for windows, tar.gz for others)
      - name: Package the executable
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a ../${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }}.zip ./*
          else
            tar -czvf ../${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }}.tar.gz ./*
          fi
          cd ..
          
      # 第七步：上传构建产物到 Release
      - name: Upload assets to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.APP_NAME }}-${{ matrix.asset_name_prefix }}.*
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true